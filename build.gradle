import com.anysoftkeyboard.tools.generatewordslist.GenerateWordsListFromAOSPTask
import com.anysoftkeyboard.tools.makedictionary.MakeDictionaryTask

import com.anysoftkeyboard.tools.generatewordslist.GenerateWordsListTask

buildscript {
    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'

        classpath 'com.github.AnySoftKeyboard.AnySoftKeyboardTools:makedictionary:99bd3e6'
        classpath 'com.github.AnySoftKeyboard.AnySoftKeyboardTools:generatewordslist:99bd3e6'
        classpath 'org.jsoup:jsoup:1.9.1'
    }
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "com.anysoftkeyboard.languagepack.tatar"
        minSdkVersion 7
        targetSdkVersion 25
        versionCode 1
        versionName "0.1-alpha"
    }

    signingConfigs {
        release {
            def propsFile = rootProject.file('keystore.properties')

            if (propsFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }

        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            debuggable false

            minifyEnabled false
        }
    }
}

//task parseStateAssembly(type: com.anysoftkeyboard.tools.generatewordslist.GenerateWordsListTask) {
//    inputFile new File(project.getProjectDir(), "dictionary/kitaphane.tatarstan.ru.united.txt")
//    outputWordsListFile new File(project.getProjectDir(), "dictionary/words_ny_state_assembly.xml")
//}
//def tatarCharacters = "АаБбВвГгДдЕеЁёЖжЗзИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯя".toCharArray()
//def additionalTatarInnerCharacters = "-".toCharArray();
//
//task parseKitaphaneTatarstanRu(type: GenerateWordsListTask) {
//    inputFile new File(project.getProjectDir(), "dictionary/kitaphane.tatarstan.ru.united.txt")
////    wordCharacters = "АаӘәБбВвГгДдЕеЁёЖжҖҗЗзИиЙйКкЛлМмНнҢңОоӨөПпРрСсТтУуҮүФфХхҺһЦцЧчШшЩщЪъЫыЬьЭэЮюЯя".toCharArray()
//    wordCharacters = tatarCharacters
//    additionalInnerCharacters = additionalTatarInnerCharacters
////    locale new Locale("ru")
//    outputWordsListFile new File(project.getProjectDir(), "dictionary/kitaphane.tatarstan.ru.united.xml")
//}
//
//task mergeAllWordLists(type: com.anysoftkeyboard.tools.generatewordslist.MergeWordsListTask) {
////    dependsOn parseStateAssembly
//    dependsOn parseKitaphaneTatarstanRu
//
//    inputWordsListFiles = [
////            new File(project.getProjectDir(), "dictionary/words_ny_state_assembly.xml"),
////            new File(project.getProjectDir(), "dictionary/popular_websites_words.xml"),//website I use most
//new File(project.getProjectDir(), "dictionary/kitaphane.tatarstan.ru.united.xml")
//    ] as File[]
//    outputWordsListFile new File(project.getProjectDir(), "dictionary/words_merged.xml")
//    maxWordsInList 100000
//}
//
//task makeDictionary(type: MakeDictionaryTask) {
//    doFirst {
//        mkdir 'src/main/res/raw'
//    }
//    dependsOn mergeAllWordLists
//    inputWordsListFile new File(project.getProjectDir(), "dictionary/words_merged.xml")
//}

afterEvaluate { proj ->
    proj.tasks.all { task ->
        if (task.name.startsWith('generate') && task.name.endsWith('BuildConfig')) {
            task.dependsOn makeDictionary
        }
    }
}

dependencies {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }
    compile 'com.github.AnySoftKeyboard:AnySoftKeyboard-API:1.7.0'
}